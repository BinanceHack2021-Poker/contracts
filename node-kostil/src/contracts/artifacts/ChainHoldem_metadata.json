{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_comission",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "changeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "smallBlind",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "limit",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "randomStateHash",
						"type": "bytes32"
					}
				],
				"name": "createGame",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "gameId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gameId",
						"type": "uint256"
					}
				],
				"name": "escapeGame",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gameId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "randomStateHash",
						"type": "bytes32"
					}
				],
				"name": "joinGame",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "playerId",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gameId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "claimedHand",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "claimedCombination",
						"type": "uint8"
					}
				],
				"name": "revealCards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gameId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "randomState",
						"type": "uint256"
					}
				],
				"name": "verifyPlayerState",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "contract designed to organize secured decentralized PVP holdem poker matches each game starts with createGame method, and represents one round, i e for each game will be played the same matches as the number of players(2)",
			"kind": "dev",
			"methods": {
				"changeOwner(address)": {
					"details": "Change contract owner",
					"params": {
						"newOwner": "address of new owner"
					}
				},
				"constructor": {
					"details": "Set contract deployer as owner and comission"
				},
				"createGame(uint256,uint256,bytes32)": {
					"details": "Create new game and join owner to it",
					"params": {
						"limit": "is size of limit for each bet (in wei)",
						"randomStateHash": "is keccak256 hash of random state part proposed by player returns gameId is id for created game",
						"smallBlind": "is size of small blind (in wei)"
					}
				},
				"escapeGame(uint256)": {
					"details": "Escape from created game(which not started yet) and destroy it, could be called only by owner",
					"params": {
						"gameId": "is id of game"
					}
				},
				"joinGame(uint256,bytes32)": {
					"details": "Join existed game",
					"params": {
						"gameId": "is id of game",
						"randomStateHash": "is keccak256 hash of random state part proposed by player"
					}
				}
			},
			"title": "ChainHoldem",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Users/sergmiller/Documents/my/contracts/node-kostil/src/contracts/chain_holdem.sol": "ChainHoldem"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e",
				"dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"
			]
		},
		"Users/sergmiller/Documents/my/contracts/node-kostil/src/contracts/chain_holdem.sol": {
			"keccak256": "0x33434d3980526d2524ff0295b22125df804c4e93061b49c0cae92cec40b50233",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ba203beb936b5218375dcbd3d00c986689c1749bdea1b87cf559b12aecb82922",
				"dweb:/ipfs/QmcnQBmLevpSgJ3NPQj86ik8tVDYhWkrzMVQ7gzaf8sKjy"
			]
		}
	},
	"version": 1
}